// Code generated by MockGen. DO NOT EDIT.
// Source: survey.go
//
// Generated by this command:
//
//	mockgen -package survey -destination survey_mock.go -source survey.go
//

// Package survey is a generated GoMock package.
package survey

import (
	reflect "reflect"

	survey "github.com/AlecAivazis/survey/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockAsker is a mock of Asker interface.
type MockAsker struct {
	ctrl     *gomock.Controller
	recorder *MockAskerMockRecorder
}

// MockAskerMockRecorder is the mock recorder for MockAsker.
type MockAskerMockRecorder struct {
	mock *MockAsker
}

// NewMockAsker creates a new mock instance.
func NewMockAsker(ctrl *gomock.Controller) *MockAsker {
	mock := &MockAsker{ctrl: ctrl}
	mock.recorder = &MockAskerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsker) EXPECT() *MockAskerMockRecorder {
	return m.recorder
}

// Ask mocks base method.
func (m *MockAsker) Ask(questions []*survey.Question, answers any, opts ...survey.AskOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{questions, answers}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ask", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ask indicates an expected call of Ask.
func (mr *MockAskerMockRecorder) Ask(questions, answers any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{questions, answers}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ask", reflect.TypeOf((*MockAsker)(nil).Ask), varargs...)
}

// AskOne mocks base method.
func (m *MockAsker) AskOne(p survey.Prompt, response any, opts ...survey.AskOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{p, response}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AskOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AskOne indicates an expected call of AskOne.
func (mr *MockAskerMockRecorder) AskOne(p, response any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{p, response}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskOne", reflect.TypeOf((*MockAsker)(nil).AskOne), varargs...)
}
