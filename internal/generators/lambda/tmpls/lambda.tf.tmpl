{{if $.AsModule}}module "{{ToSnake $.Name}}_lambda" {
  source = "{{$.Source}}"

  stack_name                               = local.stack_name
  lambda_function_description              = "{{$.Description}}"
  lambda_function_throttles_alarm_disabled = true
  lambda_function_name                     = "{{$.Name}}"
  lambda_function_kms_key_arn              = var.lambda_function_kms_key_arn
  lambda_function_sns_topic_monitoring_arn = var.alerting_sns_topic_arn
  lambda_function_source_base_path         = var.lambda_function_source_base_path
  lambda_function_existing_execute_role    = "arn:aws:iam::${var.account_id}:role/{{$.RoleName}}"
  lambda_function_vpc_config               = var.lambda_function_vpc_config

  lambda_function_env_vars = {
    TRACE          = "1"
    TRACE_ENTITIES = "Y"
    TIME_LOCATION  = "UTC"
    {{ range $key, $value := $.Envars }}{{$key}} = {{$value}}
    {{end}}
  }

  client      = var.client
  environment = var.environment
  region      = var.region
  account_id  = var.account_id
}{{else}}resource "aws_lambda_function" "{{ToSnake $.Name}}_lambda" {
  filename      = "{{$.Source}}/{{ToSnake $.Name}}_lambda.zip"
  function_name = "{{ToSnake $.Name}}_lambda"
  description   = "{{$.Description}}"
  role          = aws_iam_role.{{$.RoleName}}.arn
  handler       = "{{ToSnake $.Name}}_lambda"

  source_code_hash = filebase64sha256("{{$.Source}}/{{ToSnake $.Name}}_lambda.zip")

  runtime = "{{$.Runtime}}"

  environment {
    variables = {
      {{ range $key, $value := $.Envars }}{{$key}} = {{$value}}
      {{end}}
    }
  }
}{{end}}
{{ $length := len $.SQSTriggers}}{{ if gt $length 0 }}{{ range $i, $sqs := $.SQSTriggers }}
// {{$.Name}} SQS trigger rule for lambda
resource "aws_lambda_event_source_mapping" "{{ToSnake $.Name}}_lambda_sqs_trigger" {
  event_source_arn = {{.SourceARN}}
  function_name    = aws_lambda_function.{{ToSnake $.Name}}_lambda.arn
  batch_size       = 1
  enabled          = true
}
{{end}}{{end}}{{ $length := len $.Crons}}{{ if gt $length 0 }}{{ range $i, $sqs := $.Crons }}
// Trigger alarm for starting the {{$.Name}} lambda
resource "aws_cloudwatch_event_rule" "{{ToSnake $.Name}}_cron" {
  name                = "run{{ToPascal $.Name}}"
  description         = "Trigger alarm for starting the {{$.Name}} lambda"
  schedule_expression = "{{.ScheduleExpression}}"
  is_enabled          = {{.IsEnabled}}
}

resource "aws_cloudwatch_event_target" "{{ToSnake $.Name}}_cron_target" {
  rule = aws_cloudwatch_event_rule.{{ToSnake $.Name}}_cron.name
  arn  = aws_lambda_function.{{ToSnake $.Name}}_lambda.arn
}

resource "aws_lambda_permission" "{{ToSnake $.Name}}_allow_cron" {
  statement_id  = "AllowExecutionFromCloudWatch"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.{{ToSnake $.Name}}_lambda.arn
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.{{ToSnake $.Name}}_cron.arn
}{{end}}{{end}}{{ $length := len $.KinesisTriggers}}{{ if gt $length 0 }}
resource "aws_lambda_permission" "{{ToSnake $.Name}}_allow_kinesis" {
  statement_id  = "AllowExecutionFromKinesis"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.{{ToSnake $.Name}}_lambda.function_name
  principal     = "kinesis.amazonaws.com"
}
{{ range $i, $kinesis := $.KinesisTriggers }}
resource "aws_lambda_event_source_mapping" "{{ToSnake $.Name}}_kinesis_mapping" {
  event_source_arn  = {{.SourceARN}}
  function_name     = aws_lambda_function.{{ToSnake $.Name}}_lambda.function_name
  batch_size        = 10
  starting_position = "TRIM_HORIZON"
}
{{end}}{{end}}