version: "3"

vars:
  LINT_TIMEOUT: 5m
  GOTEST_ARGS: -count=1 -v -failfast
  COVER_OUT: coverage.out
  COVER_NOMOCKS_OUT: coverage.nomocks.out

tasks:
  install:
    desc: "Install all project tools"
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install go.uber.org/mock/mockgen@latest
      - go install golang.org/x/tools/cmd/goimports@latest
      - go install mvdan.cc/gofumpt@v0.4.0
      - echo "==> To format terraform files, please install terraform"

  lint:
    desc: "Run golangci-lint"
    cmds:
      - golangci-lint version
      - golangci-lint run -v --timeout="{{.LINT_TIMEOUT}}" {{.USER_WORKING_DIR}}/...

  fmt:
    desc: "Format code"
    cmds:
      - goimports -w . && gofumpt -l -w .

  mocks:
    desc: "Generate mocks"
    cmds:
      - go generate -v ../...

  tests:
    desc: "Run all tests"
    cmds:
      - go test {{.GOTEST_ARGS}} -cover {{.USER_WORKING_DIR}}/...

  cov:
    desc: "Run code coverage"
    cmds:
      - go test {{.GOTEST_ARGS}} -covermode=count -coverpkg=../... -coverprofile={{.COVER_OUT}} -cover ../...
      - cat {{.COVER_OUT}} | grep -v "mock" > {{.COVER_NOMOCKS_OUT}}
      - go tool cover -func {{.COVER_NOMOCKS_OUT}} > {{.COVER_OUT}}
      - echo "Coverage overall:"
      - cat {{.COVER_OUT}} | tail -n 1
  
  cov-html:
    desc: "Run code coverage and open html"
    deps: 
      - cov
    cmds:
      - go tool cover -html={{.COVER_NOMOCKS_OUT}}
  
  cov-badge:
    desc: "Update coverage badge in the README"
    deps: 
      - cov
    cmds:
      - ./update_coverage.sh {{.COVER_OUT}} {{.USER_WORKING_DIR}}/README.md

  clean-mocks:
    desc: "Remove all generated mocks"
    cmds:
      - find . -iname '*mock.go' -exec rm {} \;
