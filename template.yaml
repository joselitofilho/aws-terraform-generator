# Diagram configurations include modules to specify the URL pointing to the GitHub
# repository for the resources module.
diagram:
  stack_name: mystack
  lambda:
    # URL pointing to the GitHub repository for the Lambda module
    # Replace "username" with the actual GitHub username
    # Replace "terraform-aws-lambda" with the actual repository name
    # Replace "reference" with the actual reference (branch, tag, or commit)
    source: git@github.com:username/terraform-aws-lambda?ref=reference
    role_name: execute_lambda
    runtime: go1.x

# Structure for stacks with multiple environments
structure:
  # Stacks section. Each stack configuration includes folders for different environments (`dev`, `uat`, `prd`, etc.),
  # default templates, and specific configurations for lambdas, API gateways, SQS, and so on.
  stacks:
    - name: mystack
      # Folders for different environments Each environment folder contains the following Terraform files:
      #  - `main.tf`: Main Terraform configuration.
      #  - `terragrunt.hcl`: Terragrunt configuration.
      #  - `vars.tf`: Variable definitions.
      folders:
        # Development environment
        - name: dev
          # Terraform configuration files for dev environment
          files:
            - name: main.tf
            - name: terragrunt.hcl
            - name: vars.tf
        # User Acceptance Testing environment
        - name: uat
          # Terraform configuration files for uat environment
          files:
            - name: main.tf
            - name: terragrunt.hcl
            - name: vars.tf
        # Production environment
        - name: prd
          # Terraform configuration files for prd environment
          files:
            - name: main.tf
            - name: terragrunt.hcl
            - name: vars.tf
        # Common module
        - name: mod
          # Terraform configuration files for module
          files:
            - name: main.tf
              # Template for generating stack_name based on environment
              tmpl: |-
                locals {
                  stack_name = "{{$.StackName}}-${var.environment}"
                }
            - name: vars.tf
        # Lambda functions
        - name: lambda

  # Default templates are provided for creating stacks. These templates include backend configuration, provider
  # configuration, module instantiation, and variable definitions.
  default_templates:
    - main.tf: |-
        # Terraform backend and required providers configuration
        terraform {
          backend "s3" {
          }
          required_providers {
            aws = {
              source  = "hashicorp/aws"
              version = "~> 3.71"
            }
          }
        }

        # AWS provider configuration
        provider "aws" {
          region  = var.region
          profile = "${var.client}-sdv-${var.environment}"

          allowed_account_ids = [var.account_id]
        }

        # Module instantiation
        module "{{$.StackName}}" {
          source = "../mod"

          client      = var.client
          environment = var.environment
          region      = var.region
          account_id  = var.account_id

          // Variables from global

          dns_zone_id                      = var.zone_id
          alerting_sns_topic_arn           = var.alerting_sns_topic_arn
          lambda_function_source_base_path = var.lambda_function_source_base_path
          lambda_function_vpc_config       = var.lambda_function_vpc_config
          lambda_function_kms_key_arn      = var.lambda_function_kms_key_arn
        }

      terragrunt.hcl: |-
        # Terragrunt configuration
        include {
          path = find_in_parent_folders()
        }

      vars.tf: |-
        # Variables definition
        variable "client" {
          type = string
        }

        variable "environment" {
          type = string
        }

        variable "region" {
          type = string
        }

        variable "account_id" {
          type = string
        }

        variable "zone_id" {
          type = string
        }

        variable "alerting_sns_topic_arn" {
          type = string
        }

        variable "lambda_function_source_base_path" {
          type = string
        }

        variable "lambda_function_vpc_config" {
          type = map(list(string))
        }

        variable "lambda_function_kms_key_arn" {
          type = string
        }

# Lambda configurations include lambda function names, descriptions, environment variables, SQS triggers,
# cron schedules, and code configurations.
lambdas:
  # Configuration for the exampleReceiver lambda function
  - name: exampleReceiver
    source: git@github.com:username/terraform-aws-lambda?ref=reference
    role_name: execute_lambda
    runtime: go1.x
    description: "Trigger on schedule and initiate the execution of example receiver"
    # Environment variables
    envars:
      - MYAPI_API_BASE_URL: var.myapi_api_base_url
        MYAPI_USER: var.myapi_user
        MYAPI_PASSWORD_SECRET: aws_secretsmanager_secret.myapi_password.name
        DOCDB_HOST: var.docdb_host
        DOCDB_USER: var.docdb_user
        DOCDB_PASSWORD_SECRET: var.docdb_password_secret
        SQS_QUEUE_URL: aws_sqs_queue.target_sqs.id
    # SQS triggers for lambda function
    sqs-triggers:
      - source_arn: aws_sqs_queue.source_sqs.arn
    # Cron schedule for lambda function
    crons:
      - schedule_expression: cron(0 1 * * ? *)
        is_enabled: var.trigger_enabled
    # Optional. List of files that we can customize
    files:
      - name: lambda.go
        # Optional. We can specify what imports we want to add in the output GoLang file.
        imports:
          - "github.com/mylogging/logging"
        # Optional. We can specify the template for the output GoLang file.
        tmpl: |-
          package main

# API Gateway configurations include stack names, API domain names, lambda associations, and code configurations.
apigateways:
  # Stack configuration for the mystack API Gateway
  - stack_name: mystack
    api_domain: mystack-api.domain-${var.environment}.com
    apig: true
    # Lambdas associated with the mystack API Gateway
    lambdas:
      - name: exampleAPIReceiver
        source: git@github.com:username/terraform-aws-lambda?ref=reference
        role_name: execute_lambda
        runtime: go1.x
        description: Trigger the example API receiver via API Gateway
        verb: POST
        path: /v1/examples
        # File configuration for the lambda associated with the API Gateway
        files:
          - name: lambda.go
            # Optional. We have the option to specify the imports to include in the resulting GoLang file.
            imports:
              - "github.com/logging"
          - name: main.go
            # Optional. We can specify the template for the output GoLang file.
            tmpl: |- 
              package main

              import(
                  "github.com/aws/aws-lambda-go/lambda"
              )

              func main() {
                  // TODO
                  lambda.Start({{$.Name}}Lambda.run)
              }

# SQS configurations include queue names and maximum receive counts.
sqs:
  # Configuration for the target SQS queue
  - name: target
    max_receive_count: 15
    # Optional. List of files that we can customize
    files:
      - name: "target-sqs.tf"
        tmpl: |-
          resource "aws_sqs_queue" "{{ToSnake $.Name}}_sqs" {}
  # Configuration for the source SQS queue
  - name: source
    max_receive_count: 10

# SNS configuration section
sns:
  - name: example
    # Name of the S3 bucket
    bucket_name: my-bucket
    # List of Lambda functions triggered by S3 events
    lambdas:
      - name: exampleReceiver
        # Events triggering Lambda
        events:
          - "s3:ObjectCreated:*" # Event indicating an object creation in S3
        # Optional. Prefix filter for S3 objects
        filter_prefix: "my_prefix"
        # Optional. Suffix filter for S3 objects
        filter_suffix: ".txt"
    # List of SQS to receive notification from an S3 bucket
    sqs:
      - name: target
        # SQS receiving notification from an S3 bucket
        events:
          - "s3:ObjectCreated:*" # Event indicating an object creation in S3
        # Optional. Prefix filter for S3 objects
        filter_prefix: "my_prefix"
        # Optional. Suffix filter for S3 objects
        filter_suffix: ".txt"
    # Optional. List of files that we can customize
    files:
      - name: "example-sns.tf"
        tmpl: |-
          resource "aws_s3_bucket_notification" "s3_bucket_notification_{{ToSnake $.Name}}" {}

# S3 bucket configurations include bucket names, object keys, and source paths.
buckets:
  # Configuration for the my-bucket S3 bucket
  - name: my-bucket
    expiration-days: 90
    files: # Optional. List of files that we can customize
      - name: "my-bucket-s3.tf"
        tmpl: |-
          resource "aws_s3_bucket" "{{ToSnake $.Name}}_bucket" {}

# RESTful API configurations include API names.
restfulapis:
  # Configuration for the MyAPI RESTful API
  - name: MyAPI
